generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// For the auth
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique @db.ObjectId
  type              String
  provider          String
  providerAccountId String 
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  subscribed        Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  account       Account[]
  sessions      Session[]
  habits        Habit[]   @relation(name: "UserHabits")
  entries       Entry[]   @relation(name: "UserEntries")
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// core application types

enum HabitType {
  DAILY
  WEEKLY
}

model Habit {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId              String @db.ObjectId
  user                User      @relation(fields: [userId], references: [id], name: "UserHabits")
  title               String
  description         String?
  requiredEntries     Int
  requiredEntryPeriod HabitType @map("habitType")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  entries             Entry[]   @relation(name: "HabitEntries")
}

model Entry {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  note      String?
  habitId   String @db.ObjectId
  habit     Habit    @relation(fields: [habitId], references: [id], name: "HabitEntries", onDelete: Cascade)
  userId    String @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], name: "UserEntries")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
